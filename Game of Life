// TITLE : Game of Life from CODE EVAL based on John’s Conway ‘Game of Life
// AUTHOR : James Fody
// DESCIPTION : The universe of the game is an infinite two-dimensional orthogonal grid of square cells, 
// each of which is in one of two possible states, alive or dead. Every cell that is horizontally, vertically, 
// or diagonally adjacent interacts with its eight neighbors. 
// At each step in time, the following iterations occur: 
// Any live cell with fewer than two live neighbors dies, as if caused by under-population.
// Any live cell with two or three live neighbors lives on to the next generation.
// Any live cell with more than three live neighbors dies, as if by overcrowding.
// Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.
// The board is a preseeded 2-D array 100 x 100.
package gameoflife;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;

public class GameOfLife 
{
    public static void main(String[] args) 
    {
        try
        {
            File file = new File("/Users/jimfo1/Desktop/fizzbuzz3.txt");
            BufferedReader buffer = new BufferedReader(new FileReader(file));
            
            String line;
            String str = "";
            char prevboard[][] = new char[100][100];
            char currboard[][] = new char [100][100];
            
            
            // Read data in and put int str
            while ((line = buffer.readLine()) != null) 
            {
                line = line.trim();  
                
                // Verify line is not empty
                if(!line.isEmpty())
                    str += line;
            }
            
            // Loop through str change dot to 0 and * to 1
            // and enter into prevboard
            int strIndex = 0;
            for(int x = 0; x < 100; x++)
            {
                for(int y = 0; y < 100; y++)
                {
                    prevboard[x][y] = str.charAt(strIndex);
                    strIndex++;
                }  
            }  

            // Update board
            // Outer loop determines iterations
            // Inner loops are the board
            for(int i = 0; i < 10; i++)
            {
                for(int x = 0; x < 100; x++)
                {
                    for(int y = 0; y < 100; y++)
                    {            
                        char status;
                        status = updateBoard(prevboard, x, y);
                        currboard[x][y] = status;                    
                    }
                }
                
                // Set prevboard = currboard
                for(int x = 0; x < 100; x++)
                {
                    for(int y = 0; y < 100; y++)
                    {
                        prevboard[x][y] = currboard[x][y];
                    }  
                }                              
            }
            
            // Display current board
            for(int x = 0; x < 100; x++)
            {
                for(int y = 0; y < 100; y++)
                {
                    System.out.print(currboard[x][y]);
                }  
                System.out.println();
            }             
        }
        catch (IOException e)
        {
            
        }
    }
    
    public static char updateBoard(char[][] pb, int x, int y)
    {
        
        char val = '.';
        int neighborcount = 0;
        
        // Upper Left of Center
        if(x - 1 > -1 && y + 1 < 100)
        {
            if(pb[x-1][y+1] == '*')
                neighborcount++;
        }
        
        // Above Center
        if(y + 1 < 100)
        {
            if(pb[x][y+1] == '*')
                neighborcount++;
        }
        
        // Upper Right of Center
        if(x + 1 < 100 && y + 1 < 100)
        {
            if(pb[x+1][y+1] == '*')
                neighborcount++;
        }        
        
        // Right of Center
        if(x + 1 < 100)
        {
            if(pb[x+1][y] == '*')
                neighborcount++;
        }        
        
        // Lower Right of Canter
        if(x + 1 < 100 && y - 1 > -1)
        {
            if(pb[x+1][y-1] == '*')
                neighborcount++;
        }
        
        // Below Center
        if(y - 1 > -1)
        {
            if(pb[x][y-1] == '*')
                neighborcount++;
        }        
        
        // Lower left of Center
        if(x - 1 > -1 && y - 1 > -1)
        {
            if(pb[x-1][y-1] == '*' )
                neighborcount++;
        }     
        
        // Left of Center
        if(x - 1 > -1)
        {
            if(pb[x-1][y] == '*' )
                neighborcount++;
        }       
        
        // CASE 1: If a live cell has fewer than two live neighbors it dies
        if(pb[x][y] == '*' && neighborcount < 2)
        {
            val = '.';
        }
        
        // CASE 2: If a live cell has 2 or 3 live neighbors it continues to live
        if(pb[x][y] == '*' && (neighborcount == 2 || neighborcount == 3))
        {
            val = '*';
        }
        
        // CASE 3: If a live cell has more than 3 live neighbors it dies
        if(pb[x][y] == '*' && neighborcount > 3)   
        {
            val = '.';
        }
        // CASE 4: If a dead cell has exactly 3 live neighbors it regenerates
        if(pb[x][y] == '.' && neighborcount == 3)   
        {
            val = '*';  
        }

        return val;
    }
}
