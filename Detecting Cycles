// Title : Detecting Cycles from CodeEval
// Author : James Fody
// Description : Detect a cycle within an sequence of numbers and display the cycle

package detectingcycles;
import java.io.*;
import java.util.*;
public class DetectingCycles 
{
    public static void main(String[] args) 
    {
        try
        {
            File file = new File("/Users/jimfo1/Desktop/fizzbuzz3.txt");
            BufferedReader buffer = new BufferedReader(new FileReader(file));
            
            String line;
            
            while ((line = buffer.readLine()) != null) 
            {
                line = line.trim();
                LinkedList<String> list = new LinkedList(Arrays.asList(line.split(" ")));
                String slow = list.get(0);
                String fast = list.get(0);
                int i = 0;
                int k = 1;
                
                // Floyd's cycle-finding algorithm
                while(fast != null && i < list.size())
                {
                    slow = list.get(i); // Tortoise
                    fast = list.get(k+i); // Hare
                                        
                    if(slow.equals(fast) && (k+i != i))
                    {
                        // Call to find the start of the cycle
                        findStart(list, i, k+i);
                        break;
                    }
                    
                    i++;k++;
                    
                    // Bring the Hare back to the beginning
                    if(k+i > list.size()-1)
                    {
                        k=0;
                    }
                }
            }
        }
        catch (IOException e)
        {
            
        }
    }
    
    // Find the start of the cycle
    static void findStart(List l, int i, int k)
    {
        // Tortoise and Hare are synced up in the cycle
        // back them up together one step at a time until
        // the hare falls out of the cycle
        int tortoise = 0; int hare = 0;
        if (i == 0)
            i = 1;
        for(int x = 0; i > -1; x++)
        {
            i--; k--;
            
            hare = Integer.parseInt(l.get(i)+ "");
            tortoise = Integer.parseInt(l.get(k)+ "");
            
            if(tortoise != hare || i == 0)
            {
                findSequence(l,i);
                i = -1;
            }
        }      
    }
    
    // Find the sequence
    static void findSequence(List l, int i)
    {
        // i = 0 is a special case, it means that the cycle starts
        // at beginning of the array. The base case is that the
        // tortoise falls out of the cycle, so the beginning of
        // the cycle is i+1
        String first;
        
        if(i != 0)
        {
            first = l.get(i+1)+"";
            i = i+1;
        }
        else
        {
            first = l.get(i)+"";
        }
        
        String sequence = first + " ";
             
        for(int x = i; x+1 < l.size(); x++)
        {
            
            if(!l.get(x+1).equals(first))
            {
                sequence += l.get(x+1) + " " ;
            }
            
            if(l.get(x+1).equals(first))
            {
                x = l.size();
            }
        }
        // remove trailing whitespace as per instruction
        System.out.println(sequence.trim()); 
    }
}
