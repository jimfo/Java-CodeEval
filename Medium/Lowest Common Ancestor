// Title : Lowest Common Ancestor from CodeEval
// Author : James Fody
// Description : Find the lowest common ancestor in a given tree

package lowest.common.ancestor;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;

public class LowestCommonAncestor 
{
    public static void main(String[] args) 
    {
        BinaryTree theTree = new BinaryTree();
        theTree.addNode(30);
        theTree.addNode(8);
        theTree.addNode(52);
        theTree.addNode(3);
        theTree.addNode(20);
        theTree.addNode(10);
        theTree.addNode(29);
        
        try
        {
            // create a txt file and insert name in place of my text file
            File file = new File("/Users/jimfo1/Desktop/fizzbuzz1.txt");
            BufferedReader buffer = new BufferedReader(new FileReader(file));
            String line;

            while ((line = buffer.readLine()) != null) 
            {
                line = line.trim();
                String[] temp = line.split(" ");
                int v1 = Integer.parseInt(temp[0]);
                int v2 = Integer.parseInt(temp[1]);
                
                
                Node node1 = theTree.findNode(v1);
                Node node2 = theTree.findNode(v2);
                Node lowest = theTree.lca(theTree.root, node1, node2);
                
                System.out.println(lowest);
            }
        }
        catch (IOException e)
        {
            
        }        
    }     
}
class BinaryTree 
{
    Node root;
    
    public void addNode(int v)
    {
        Node newNode = new Node(v);
        
        if (root == null)
        {
            root = newNode;
        }
        else
        {
            Node focusNode = root;
            Node parent;
            
            while(true)
            {
                parent = focusNode;
                
                if (v < focusNode.val)
                {
                    focusNode = focusNode.lChild;
                    
                    if (focusNode == null)
                    {
                        parent.lChild = newNode;
                        return;
                    }
                }
                else
                {
                    focusNode = focusNode.rChild;
                    
                    if (focusNode == null)
                    {
                        parent.rChild = newNode;
                        return;
                    }
                }
            }
        }   
    }
    
    
    public Node findNode(int v)
    {
        Node focusNode = root;
        
        while (focusNode.val != v)
        {
            if (v < focusNode.val)
            {
                focusNode = focusNode.lChild;
            }
            else
            {
                focusNode = focusNode.rChild;
            }
            
            if (focusNode == null)
            {
                return null;
            }
        }
        return focusNode;
    }   
    
    public Node lca(Node r, Node a, Node b) 
    {
        if (r == null)
        {
            return null;
        }
        
        if (r.val == a.val || r.val == b.val)
        {
            return r;
        }


        Node left = lca(r.lChild, a, b);
        Node right = lca(r.rChild, a, b);

        if (left != null && right != null) 
        {
            return r;
        }

        if (left != null)
        {
            return left;
        }
        else
        {
            return right;
        }
    }
}

class Node
{
    int val;
    Node lChild;
    Node rChild;
    
    Node (int v)
    {
        this.val = v;
    }
    
    public String toString()
    {
        return val + "";
    }
}
