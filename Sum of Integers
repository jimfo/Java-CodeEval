// Title : Sum of Integers from CodeEval
// Author : James Fody
// Description: Given a series of numbers find the largest sum of contiguous
// integers
package sum.of.integers;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;

public class SumOfIntegers 
{
    public static void main(String[] args) 
    {
        try
        {
            File file = new File("/Users/jimfo1/Desktop/fizzbuzz3.txt");
            BufferedReader buffer = new BufferedReader(new FileReader(file));
            
            String line;
            String temp[];
            
            while ((line = buffer.readLine()) != null) 
            {
                line = line.trim();
                
                // Verify line is not empty
                if(!line.isEmpty())
                {
                    int max_so_far = 0;
                    int max_ending_here = 0;
                    int max = 0;
                    boolean allNeg = true;
                    
                    // Split into array
                    temp = line.split(",");
                    int num[] = new int[temp.length];
                    
                    // fill the int array
                    for(int i = 0; i < temp.length; i++)
                    {
                        int x = Integer.parseInt(temp[i]);
                        num[i] = x;
                        
                        if(x > 0)
                        {
                            allNeg = false;
                        }
                    }
                    
                    // Use Kadaneâ€™s algorithm if pos or combination of pos/neg
                    // If values are all negative then just find the 
                    // single largest value
                    if (!allNeg)
                    {
                        for (int n : num) 
                        {
                            max_ending_here = Math.max(n, max_ending_here + n);
                            max_so_far = Math.max(max_so_far, max_ending_here);
                        }
                    }
                    else
                    {
                        max_so_far = num[0];
                        for (int n = 1; n < num.length; n++) 
                        {
                            if(num[n] > max_so_far)
                            {
                                max_so_far = num[n];
                            }
                        }
                    }
                    System.out.println(max_so_far);
                }
            }
        }
        catch (IOException e)
        {
            
        }
    }
    
}
