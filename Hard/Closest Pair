// Title : Closest Pair
// Author : James Fody
// Description: Given a sequence of points, find the distance of the closest pair
package closest.pair;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;

public class ClosestPair 
{
    public static void main(String[] args) 
    {
        try
        {
            File file = new File("/Users/jimfo1/Desktop/fizzbuzz3.txt");
            BufferedReader buffer = new BufferedReader(new FileReader(file));
            
            String line;
            String str = "";
            String temp[];
            int count = 0;
            
            double pts[] = new double [2];
            
            while ((line = buffer.readLine()) != null)  
            {
                line = line.trim();
                
                if(line.length() == 1)
                {
                    count++;
                }
                
                str += line + " ";
                if (count == 2)
                {
                    double x1 = 0, y1 = 0, x2 = 0, y2 = 0;
                    double shortest = 10000, d = 0, x3 = 0, y3 = 0;

                    str = str.substring(str.indexOf(" "), str.length()-1);
                    str = str.trim();
                    temp = str.split(" ");


                    int k = 2;
                    for(int i = 0; i < temp.length-1; i+=2)
                    {
                        x1 = Double.parseDouble(temp[i]);
                        y1 = Double.parseDouble(temp[i+1]);

                        if(x1 > -1 && x1 < 40000 && y1 > -1 && y1 < 40000)
                        {
                            for(int j = k; j < temp.length-1; j+=2)
                            {
                                x2 = Double.parseDouble(temp[j]); 
                                y2 = Double.parseDouble(temp[j+1]);
                                x3 = x2 - x1;
                                y3 = y2 - y1;

                                if(x2 > -1 && x2 < 40000 && y2 > -1 && y2 < 40000)
                                {
                                    d = x3 * x3 + y3 * y3;

                                    if(d < shortest)
                                    {
                                        shortest = d;
                                        pts[0] = x3; pts[1] = y3;
                                    }
                                }
                            }
                        }
                        k+=2;    
                    }
                    if(shortest < 10000)
                    {
                        shortest = Math.hypot(pts[0], pts[1]);
                        System.out.printf("%.4f", shortest);
                        System.out.println();
                        count = 0;
                        str = "";
                    }
                    else
                    {
                        System.out.println("INFINITY");
                        count = 0;
                        str = "";
                    }
                }
            }
        }
        catch (IOException e)
        {
            
        }
    }
    
}
